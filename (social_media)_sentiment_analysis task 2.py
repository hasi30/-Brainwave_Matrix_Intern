# -*- coding: utf-8 -*-
"""(social media) sentiment analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12-RpTf4EZumI1iYpmnVAGC7tuc-hAbgz
"""

import pandas as pd

# Load the uploaded CSV file
file_path = '/content/sentimentdataset.csv'
df = pd.read_csv(file_path)

# Display basic information and first few rows
df.info(), df.head()

df.columns

import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

nltk.download('stopwords')
nltk.download('wordnet')

# Initialize stopwords and lemmatizer
stop_words = set(stopwords.words('english'))
lemmatizer = WordNetLemmatizer()

# Text preprocessing function
def preprocess_text(text):
    text = text.lower()  # Lowercase
    text = re.sub(r"http\S+|www\S+|https\S+", '', text, flags=re.MULTILINE)  # Remove URLs
    text = re.sub(r'\@\w+|\#','', text)  # Remove mentions and hashtags symbol
    text = re.sub(r'[^A-Za-z\s]', '', text)  # Remove punctuation and numbers
    tokens = text.split()  # Tokenization
    tokens = [lemmatizer.lemmatize(word) for word in tokens if word not in stop_words]  # Lemmatization & stopwords removal
    return ' '.join(tokens)

# Apply preprocessing
df['Clean_Text'] = df['Text'].apply(preprocess_text)

# Show a few examples of cleaned text
df[['Text', 'Clean_Text']].head()

import matplotlib.pyplot as plt
import seaborn as sns

# Plot sentiment distribution
plt.figure(figsize=(8, 5))
# Use sns.countplot to show the distribution of sentiment values
sns.countplot(data=df, x='Sentiment', palette='viridis') # Changed 'platform' to 'Sentiment' and used countplot
plt.title('Sentiment Distribution')
plt.xlabel('Sentiment')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Convert Timestamp to datetime if not already
df['Timestamp'] = pd.to_datetime(df['Timestamp'])

# Group by Date and Sentiment for trend analysis
df['Date'] = df['Timestamp'].dt.date
sentiment_trend = df.groupby(['Date', 'Sentiment']).size().reset_index(name='Counts')

# Plot sentiment trends over time
plt.figure(figsize=(12, 6))
sns.lineplot(data=sentiment_trend, x='Date', y='Counts', hue='Sentiment', palette='viridis')
plt.title('Sentiment Trends Over Time')
plt.xlabel('Date')
plt.ylabel('Number of Posts')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Generate word cloud for Positive Sentiment
# Filter the DataFrame for rows where 'Sentiment' is 'Positive'
positive_df = df[df['Sentiment'] == 'Positive']

# Check if the filtered DataFrame is not empty
if not positive_df.empty:
    positive_text = ' '.join(positive_df['Clean_Text'])
    # Check if the joined text is not empty after preprocessing
    if positive_text.strip():
        wordcloud_pos = WordCloud(width=800, height=400, background_color='white', colormap='Greens').generate(positive_text)

        plt.figure(figsize=(10, 5))
        plt.imshow(wordcloud_pos, interpolation='bilinear')
        plt.axis('off')
        plt.title('Positive Sentiment Word Cloud')
        plt.show()
    else:
        print("No valid words found for Positive Sentiment word cloud after preprocessing.")
else:
    print("No data found for Positive Sentiment.")


# Generate word cloud for Negative Sentiment
negative_df = df[df['Sentiment'] == 'Negative']
if not negative_df.empty:
    negative_text = ' '.join(negative_df['Clean_Text'])
    if negative_text.strip():
        wordcloud_neg = WordCloud(width=800, height=400, background_color='white', colormap='Reds').generate(negative_text)

        plt.figure(figsize=(10, 5))
        plt.imshow(wordcloud_neg, interpolation='bilinear')
        plt.axis('off')
        plt.title('Negative Sentiment Word Cloud')
        plt.show()
    else:
         print("No valid words found for Negative Sentiment word cloud after preprocessing.")
else:
    print("No data found for Negative Sentiment.")

plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='Platform', hue='Sentiment', palette='viridis')
plt.title('Sentiment by Platform')
plt.xlabel('Platform')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

